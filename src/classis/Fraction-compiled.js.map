{"version":3,"sources":["Fraction.js"],"names":[],"mappings":"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","file":"Fraction-compiled.js","sourcesContent":["/**\n * Created by 1111 on 10.05.2018.\n * Класс дробь.\n */\n\nimport {getIntRandom} from \"../functions\"\n\nclass Fraction {\n\n  /**\n   * Конструктор дроби\n   * @param num {number} числитель\n   * @param denom {number} знаменатель\n   * @param whole {number} целая часть\n   * @param sign {boolean} Знак числа. Если true - отрицательное\n   */\n  constructor(num,denom,whole,sign){\n    if(typeof num !== \"undefined\")\n      this.num = num;\n    if(typeof denom !== \"undefined\")\n    this.denom = denom;\n    if(typeof whole !== \"undefined\")\n      this.whole = whole;\n    if(typeof sign !== \"undefined\")\n      this.sign = sign;\n    this.signify(true);\n  }\n\n  /**\n   * Сокращение дробей.\n   * Если невозможно сократить - возвращает false\n   * @returns {boolean|Fraction}\n   */\n  reduce(){\n    let self = this.integrWhole();\n    let a = self.num;\n    let b = self.denom;\n    let k = 0;\n    for(let i = 2; i<999;i++){\n      if(a%i === 0 && b%i === 0){\n        a = a/i;\n        b = b/i;\n        k ++;\n      }\n    }\n    if(k === 0) return false;\n    else {\n      let out = new Fraction(a,b,0,this.sign);\n      out.sign = this.sign;\n      return out\n    }\n  }\n\n  /**\n   * Выделение целой части\n   * @returns {Fraction}\n   */\n  isolateWhole(){\n    if(this.num < this.denom) return this;\n    let whole = Math.floor(this.num / this.denom) + this.whole;\n    let num = this.num % this.denom;\n    return new Fraction(num,this.denom,whole,this.sign)\n  }\n\n  /**\n   * Преобразование к неправильной дроби, если есть целая часть\n   * @returns {Fraction}\n   */\n  integrWhole() {\n    let num = this.whole * this.denom + this.num;\n    return new Fraction(num, this.denom, 0,this.sign);\n  }\n\n  /**\n   * Определение знака дроби. Если внутри дроби возникнет отрицательный знак,\n   * он выносится в свойство sign\n   * @param local {boolean} Записывать параметры в текущий экземпляр Fraction\n   * @returns {Fraction} Вывод результата\n   */\n  signify(local){\n    let out;\n    let indicator = 1;\n    if(this.num !== 0 && this.num !== undefined)\n      indicator *= this.num;\n    if(this.denom !== 0 && this.denom !== undefined)\n      indicator *= this.denom;\n    if(this.whole < 0 && this.whole !== undefined) {\n      indicator = -1;\n    }\n\n    if(indicator >= 0)\n      return this;\n    let num = this.num;\n    let denom = this.denom;\n    let whole = this.whole;\n    if(num < 0) num = num * -1;\n    if(denom < 0) denom = denom * -1;\n    if(whole < 0) whole = whole * -1;\n\n    if(local){\n      this.num = num;\n      this.denom = denom;\n      this.whole = whole;\n      this.sign = true;\n      return this;\n    }\n\n    out = new Fraction(num, denom, whole, true);\n    out.sign = true;\n    return out;\n  }\n\n  /**\n   * Сравнение двух дробей. Если они равны - возвращает true\n   * @param {Fraction} testable\n   * @returns {boolean}\n   */\n  equal(testable){\n    return this.num === testable.num\n      &&\n      (this.denom === testable.denom ||\n        (this.denom === 0 && testable.denom === undefined) ||\n        (this.denom === undefined && testable.denom === 0)\n      ) &&\n      (this.whole === testable.whole ||\n        (this.whole === 0 && testable.whole === undefined) ||\n        (this.whole === undefined && testable.whole === 0)\n      ) &&\n      (this.sign === testable.sign ||\n        (this.sign === false && testable.sign === undefined) ||\n        (this.sign === undefined && testable.sign === false)\n      ) ||\n      (\n        (\n          (this.num === 0 && testable.num === undefined) ||\n          (this.num === undefined && testable.num === 0)\n        ) &&\n        (\n          this.sign === testable.sign ||\n          (this.sign === false && testable.sign === undefined) ||\n          (this.sign === undefined && testable.sign === false)\n        ) &&\n        (\n          this.whole === testable.whole ||\n          (this.whole === 0 && testable.whole === undefined) ||\n          (this.whole === undefined && testable.whole === 0)\n        )\n      ) ||\n      (\n        this.denom === 1 && template.denom === 1 &&\n        (\n          this.sign === testable.sign ||\n          (this.sign === false && testable.sign === undefined) ||\n          (this.sign === undefined && testable.sign === false)\n        ) &&\n        (\n          this.whole === testable.whole ||\n          (this.whole === 0 && testable.whole === undefined) ||\n          (this.whole === undefined && testable.whole === 0)\n        )\n      );\n  }\n\n  /**\n   * Генерация случайной дроби с произвольными параметрами\n   * @param config Набор настроек\n   * @returns {Fraction}\n   */\n  static generate(config){\n    let num = 0, denom = 0, whole = 0 ;\n    while(denom === 0) {\n      num = getIntRandom(config.num.min, config.num.max);\n      denom = getIntRandom(config.denom.min, config.denom.max);\n      whole = getIntRandom(config.whole.min, config.whole.max);\n      let coef = getIntRandom(config.coef.min, config.coef.max);\n      let x = getIntRandom(config.x.min, config.x.max);\n      let y = getIntRandom(config.y.min, config.y.max);\n      num = num * (coef * x);\n      denom = denom * (coef * y);\n    }\n    return new Fraction(num,denom,whole,false)\n  }\n}\n//module.exports = Fraction;\nexport default Fraction\n"]}