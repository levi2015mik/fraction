{"version":3,"sources":["Fraction.js"],"names":[],"mappings":"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","file":"Fraction-compiled.js","sourcesContent":["/**\n * Created by 1111 on 10.05.2018.\n * Класс дробь.\n */\n\nimport {getIntRandom} from \"../functions\"\n\nclass Fraction {\n\n  /**\n   * Конструктор дроби\n   * @param num {number} числитель\n   * @param denom {number} знаменатель\n   * @param whole {number} целая часть\n   * @param sign {boolean} Знак числа. Если true - отрицательное\n   */\n  constructor(num,denom,whole,sign){\n    if(typeof num != \"undefined\")\n      this.num = num;\n    if(typeof denom != \"undefined\")\n    this.denom = denom;\n    if(typeof whole != \"undefined\")\n      this.whole = whole;\n    if(typeof sign != \"undefined\")\n      this.sign = sign;\n    this.signify(true);\n  }\n\n  /**\n   * Сокращение дробей.\n   * Если невозможно сократить - возвращает false\n   * @returns {boolean|Fraction}\n   */\n  reduce(){\n    var self = this.integrWhole();\n    var a = self.num;\n    var b = self.denom;\n    var k = 0;\n    for(var i = 2; i<999;i++){\n      if(a%i == 0 && b%i == 0){\n        a = a/i;\n        b = b/i;\n        k ++;\n      }\n    }\n    if(k == 0) return false;\n    else {\n      let out = new Fraction(a,b,0,this.sign);\n      out.sign = this.sign;\n      return out\n    }\n  }\n\n  /**\n   * Выделение целой части\n   * @returns {Fraction}\n   */\n  isolateWhole(){\n    if(this.num < this.denom) return this;\n    var whole = Math.floor(this.num / this.denom) + this.whole;\n    var num = this.num % this.denom;\n    return new Fraction(num,this.denom,whole,this.sign)\n  }\n\n  /**\n   * Преобразование к неправильной дроби, если есть целая часть\n   * @returns {Fraction}\n   */\n  integrWhole() {\n    var num = this.whole * this.denom + this.num;\n    return new Fraction(num, this.denom, 0,this.sign);\n  }\n\n  /**\n   * Определение знака дроби. Если внутри дроби возникнет отрицательный знак,\n   * он выносится в свойство sign\n   * @param local {boolean} Записывать параметры в текущий экземпляр Fraction\n   * @returns {Fraction} Вывод результата\n   */\n  signify(local){\n    var out;\n    var indicator = 1;\n    if(this.num != 0 && this.num != undefined)\n      indicator *= this.num;\n    if(this.denom != 0 && this.denom != undefined)\n      indicator *= this.denom;\n    if(this.whole < 0 && this.whole != undefined) {\n      indicator = -1;\n    }\n\n    if(indicator >= 0)\n      return this;\n    var num = this.num;\n    var denom = this.denom;\n    var whole = this.whole;\n    if(num < 0) num = num * -1;\n    if(denom < 0) denom = denom * -1;\n    if(whole < 0) whole = whole * -1;\n\n    if(local){\n      this.num = num;\n      this.denom = denom;\n      this.whole = whole;\n      this.sign = true;\n      return;\n    }\n\n    out = new Fraction(num, denom, whole);\n    out.sign = true;\n    return out;\n  }\n\n  /**\n   * Сравнение двух дробей. Если они равны - возвращает true\n   * @param {Fraction} testable\n   * @returns {boolean}\n   */\n  equal(testable){\n    if(\n        this.num == testable.num\n        &&\n      (  this.denom == testable.denom ||\n        (this.denom == 0 && testable.denom == undefined) ||\n        (this.denom == undefined && testable.denom == 0)\n      ) &&\n      (  this.whole == testable.whole ||\n        (this.whole == 0 && testable.whole == undefined) ||\n        (this.whole == undefined && testable.whole == 0)\n      ) &&\n      (  this.sign == testable.sign ||\n        (this.sign == false && testable.sign == undefined) ||\n        (this.sign == undefined && testable.sign == false)\n      ) ||\n      (\n        (\n          (this.num == 0 && testable.num == undefined) ||\n          (this.num == undefined && testable.num == 0)\n        ) &&\n        (\n          this.sign == testable.sign ||\n          (this.sign == false && testable.sign == undefined) ||\n          (this.sign == undefined && testable.sign == false)\n        ) &&\n        (\n          this.whole == testable.whole ||\n          (this.whole == 0 && testable.whole == undefined) ||\n          (this.whole == undefined && testable.whole == 0)\n        )\n      )\n    ){ alert(\"Ok\");\n      return true;}\n    else\n      return false;\n  }\n\n  /**\n   * Генерация случайной дроби с произвольными параметрами\n   * @param config Набор настроек\n   * @returns {Fraction}\n   */\n  static generate(config){\n    var num = 0, denom = 0, whole = 0 ;\n    while(denom == 0) {\n      num = getIntRandom(config.num.min, config.num.max);\n      denom = getIntRandom(config.denom.min, config.denom.max);\n      whole = getIntRandom(config.whole.min, config.whole.max);\n      let coef = getIntRandom(config.coef.min, config.coef.max);\n      let x = getIntRandom(config.x.min, config.x.max);\n      let y = getIntRandom(config.y.min, config.y.max);\n      num = num * (coef * x);\n      denom = denom * (coef * y);\n    }\n    return new Fraction(num,denom,whole)\n  }\n}\n\nexport default Fraction\n"]}