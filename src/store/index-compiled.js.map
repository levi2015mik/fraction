{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["import Vue from 'vue'\nimport Vuex from \"vuex\"\nimport connect from \"@/libs/connect\"\nimport templates from \"@/templates\"\n\n/**\n * Основные переменные состояния\n * =============================\n * Здесь содержится инструментарий для работы с двумя главными элементами приложения\n * - упражнениями\n * - статистикой\n * Здесь содержатся данные, методы загрузки, сохранения и изменения\n */\n\nVue.use(Vuex);\n// noinspection JSUnusedGlobalSymbols\nexport default new Vuex.Store({\n  state:{\n    test:true,     // Данные для проверки\n    exercises:[],  // Список задангий\n    statistic:[],  // Статистика\n    loaded:false,  // Была ли выполнена загрузка\n    loadedStat:false,\n    uid:0          // Идентификатор пользователя 0 - локальный\n  },\n\n\n  mutations:{\n    /**\n     * Мутация добавления нового упражнения.\n     * TODO Возможно потребуются вспомогательные операции\n     * @param state\n     * @param payload\n     */\n    addExercise(state,payload){\n      state.exercises.push(payload)\n    },\n\n    /**\n     * Внесение изменения в существующее упражнение\n     * @param state\n     * @param payload\n     */\n    updateExercise(state, payload){\n      state.exercises[payload.index] = payload.settings\n    },\n\n    /**\n     * Удаление упражнения\n     * @param state\n     * @param id\n     */\n    delExercise(state,id){\n      state.exercises = state.exercises.filter(el=>el._id !== id)\n    },\n\n    /**\n     * Добавление новой записи статистики\n     * @param state\n     * @param payload\n     */\n    pushStatistic(state,payload){\n      state.statistic.push(payload)\n    },\n\n    /**\n     * Указание, что данные загружены и сервера\n     * @param state\n     */\n    dataLoaded(state){\n      state.loaded = true\n    },\n    statLoaded(state){\n      state.loadedStat = true\n    }\n  },\n\n\n  actions:{\n    /**\n     * Упражнения\n     * ----------\n     */\n    /**\n     * Загрузка с сервера упражнений по набору условий\n     * @param context\n     * @param params\n     */\n    async loadExercises({commit,dispatch,state}, params) {\n      if(state.loaded)return false;\n      let data = await connect.loadExercises(params);\n      data.forEach(el=>commit(\"addExercise\",el));\n      commit(\"dataLoaded\");\n      return true;\n    },\n\n    /**\n     * Сохранение нового упражнения на сервер и внесение его локально\n     * @param commit\n     * @param component\n     */\n    async saveNewExercise({commit},component){\n      let el = {};\n      // Клонирование объекта, хоть не красиво -\n      // единственный способ получить рабочую схему\n      for(let name in templates[component]) {\n        el[name] = templates[component][name]\n      }\n\n      let id = await connect.saveExercise(el);\n      if(id || id === 0) {\n        el._id = id;\n        commit(\"addExercise\", el);\n        return id;\n      }\n      else return false;\n    },\n\n    /**\n     * Обновление существующего упражнения\n     * @param commit\n     * @param state\n     * @param settings\n     */\n    updateExercise({commit,state},settings){\n      for(let i = 0;i < state.exercises.length;i ++){\n        if(state.exercises[i]._id === settings._id){\n          if(connect.updateExercises(settings._id,settings))\n            commit(\"updateExercise\",{settings:settings, index:i})\n          else {\n            //TODO Обработка ошибки сохранения\n          }\n        }\n      }\n\n    },\n\n    /**\n     * Удаление упражнения по его _id\n     * @param commit\n     * @param id\n     */\n    async deleteExercise({commit},id){\n      let acc = await connect.deleteExercises(id);\n      if(acc) {\n        commit(\"delExercise\", id);\n        return true\n      }\n      else return false;\n    },\n\n    /**\n     * Статистика\n     * ----------\n     */\n\n    /**\n     * Загрузка статистики по условиям\n     * @param commit\n     * @param state\n     * @param params\n     */\n    async loadStatistic({commit, state},params){\n      if(state.loadedStat)return false;\n      let statistic = await connect.loadStatistic(params);\n      statistic.forEach(el=>{\n        commit(\"pushStatistic\",el);\n      });\n      commit(\"statLoaded\")\n    },\n\n    /**\n     * Добавление новой записи статистики\n     * @param commit\n     * @param state\n     * @param stat\n     */\n    pushStatistic({commit,state},stat){\n      stat.time = Date.now();\n      stat.uid = state.uid;\n      commit(\"pushStatistic\",stat);\n      connect.pushStatistic(stat,state.statistic);\n    }\n  }\n})\n"]}